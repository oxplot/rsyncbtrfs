#!/bin/sh
# rsyncbtrfs - an rsync/btrfs combo backup system which uses the
#              subvolume snapshot facilities of btrfs to perform
#              incremental backups.
# Copyright (C) 2014 Mansour Behabadi <mansour@oxplot.com>
#

usage() {
  echo "Usage: rsyncbtrfs {init|backup} ...

  init <dst>        Initialize a backup directory.

  backup [--bind-mount] [--compress] <src> <dst> [<arg> [<arg> ...]]
                    Backup src to dst, passing <args> to rsync.
                    Use --bind-mount to bind-mount <src> under
                    a temp directory before backing it up.
"
  exit 255
}

case $1 in

init)
  [ $# -ge 2 ] || usage
  touch "$2/.rsyncbtrfs"
;;

backup)

  shift 1

  BIND_MOUNT=N
  COMPRESS=N
  while [ $# -gt 0 ]
  do
    case "$1" in
      --bind-mount)  BIND_MOUNT=Y;;
      --compress)    COMPRESS=Y;;
      -*)            echo "Invalid backup option $1"; echo; usage;;
      *)             break;;
    esac
    shift
  done

  [ $# -ge 2 ] || usage
  BACKUP_SRC="$1"
  BACKUP_DST="$2"

  shift 2

  # We do a simple check to prevent situations where the backup dst is
  # mistyped.

  if [ ! -e "$BACKUP_DST/.rsyncbtrfs" ]
  then
    echo "dst is not initialized - run 'rsyncbtrfs init $BACKUP_DST'"
    exit 254
  fi

  TMP_INPROG="`mktemp -d "$BACKUP_DST/.inprog-XXXXXXX"`"
  TMP_MOUNT="`mktemp -d --tmpdir rsyncbtrfs-XXXXXXX`"
  NEW_SUBVOL="`date +%F-%T`"

  # Cleanup handlers
 
  trap '
    umount "$TMP_MOUNT" >/dev/null 2>&1
    rmdir "$TMP_MOUNT"
    btrfs subvolume delete "$TMP_INPROG/vol" >/dev/null 2>&1
    rm -f "$TMP_INPROG/cur"
    rmdir "$TMP_INPROG"
  ' INT QUIT TERM EXIT
  
  if [ "$BIND_MOUNT" = 'Y' ]
  then
    mount --bind "$BACKUP_SRC" "$TMP_MOUNT" || exit 253
    RSYNC_SRC="$TMP_MOUNT"
  else
    RSYNC_SRC="$BACKUP_SRC"
  fi

  # Decide if the first subvolume is created or the current one is
  # snapshotted.

  if [ -L "$BACKUP_DST/cur" ]
  then
    btrfs subvolume snapshot \
      "$BACKUP_DST/`readlink "$BACKUP_DST/cur"`" \
      "$TMP_INPROG/vol" || exit 253
  else
    btrfs subvolume create "$TMP_INPROG/vol" || exit 253
    if [ "$COMPRESS" = 'Y' ]
    then
      chattr +c "$TMP_INPROG/vol" || exit 253
    fi
  fi

  # Do the backup.

  rsync --delete --delete-before --delete-excluded --inplace \
    --no-whole-file -a $@ \
    "$RSYNC_SRC/" "$TMP_INPROG/vol" || exit 253

  # Move the new backup subvolume to its final path

  mv -Tn "$TMP_INPROG/vol" "$BACKUP_DST/$NEW_SUBVOL"

  if [ -d "$TMP_INPROG/vol" ]
  then
    echo "$NEW_SUBVOL already exists - discarding new backup"
    exit 253
  fi

  # Point cur symlink to the backup we just made.

  ln -s "$NEW_SUBVOL" "$TMP_INPROG/cur" || exit 253
  mv -Tf "$TMP_INPROG/cur" "$BACKUP_DST/cur" || exit 253

;;

*)
  usage
;;
esac

exit 0
